openapi: 3.0.2
info:
  title: barbank
  version: 1.0.0
paths:
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `user` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `user` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      tags:
        - Users
      responses:
        '200':
          description: Successful response.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                'User validation failed: {param}: Path `{param}` is required.':
                  value:
                    error: 'User validation failed: {param}: Path `{param}` is required.'
          description: Input validation failed. Some parameter is missing or in incorrect format.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exists
      operationId: createuser
      summary: Create a user
      description: Creates a new instance of a `user`.
  /users/current:
    summary: User details
    description: Returns user's details
    get:
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              examples:
                User details:
                  value:
                    accounts:
                      -
                        name: Main
                        number: abcaadf109e64d7099027a2776503897fe0
                        balance: 10000000
                        currency: USD
                    name: Jack Sparrow
                    username: jack
          description: Returns user's details
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid Authorization header:
                  value:
                    error: Invalid Authorization header format
          description: Invalid Authorization header format
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid Authorization header
      security:
        -
          bearerAuth: []
      summary: Get user's details
      description: Returns instance of `user`
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/session'
            examples:
              POST /sessions request body:
                value:
                  username: jack
                  password: blackpearl
        required: true
      tags:
        - Sessions
      responses:
        '201':
          content:
            application/json:
              examples:
                POST /sessions 201 response:
                  value:
                    token: 23m52jmnb52b524t4
          description: Successful response.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid credentials:
                  value:
                    error: Invalid credentials
          description: Invalid credentials
      operationId: createsession
      summary: Create a session
      description: Creates a new instance of a `session`.
    delete:
      tags:
        - Sessions
      responses:
        '204':
          description: Successful logout
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid Authorization header:
                  value:
                    error: Invalid Authorization header format
          description: Invalid Authorization header format
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid Authorization header:
                  value:
                    error: Invalid authorization header
                Invalid Authorization header format:
                  value:
                    error: Invalid authorization header format
                Missing Authorization header:
                  value:
                    error: Missing Authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Invalid Authorization header
      security:
        -
          bearerAuth: []
  /transactions:
    post:
      requestBody:
        description: Make a transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
            examples:
              POST /transactions request body:
                value:
                  explanation: BMW
                  amount: '3000'
                  currency: USD
                  accountTo: 5bd8ebc5f91c809008561d3879f5d6f6ced
                  accountFrom: 5bd745117f1baf723a8930d44fda054ae46
        required: true
      tags:
        - Transactions
      responses:
        '201':
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid amount:
                  value:
                    error: Invalid amount
                Invalid Authorization header format:
                  value:
                    error: Invalid authorization header format
                Invalid explanation:
                  value:
                    error: Invalid explanation
          description: Missing parameter or in incorrect format
        '401':
          content:
            application/json:
              schema:
                type: string
              examples:
                Missing authorization header:
                  value:
                    error: Missing authorization header
                Invalid Authorization header:
                  value:
                    error: Invalid authorization header
                Invalid token:
                  value:
                    error: Invalid token
          description: Unauthorized
        '402':
          content:
            application/json:
              examples:
                Insufficient funds:
                  value:
                    error: Insufficient funds
          description: Insufficient funds
        '404':
          content:
            application/json:
              examples:
                AccountFrom does not exist or belong to user:
                  value:
                    error: User not found
                AccountTo does not exist:
                  value:
                    error: User not found
          description: AccountFrom does not belong to user or neither account exists
      security:
        -
          bearerAuth: []
      summary: Make a transaction
components:
  schemas:
    user:
      title: Root Type for user
      description: ''
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        token:
          type: string
      example:
        username: jack
        password: blackpearl
        name: Jack Sparrow
    error:
      title: Root Type for error
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: Error message.
    session:
      description: ''
      type: object
    transaction:
      description: ''
      required:
        - amount
        - accountTo
        - accountFrom
        - explanation
      type: object
      properties:
        amount:
          description: ''
          type: number
        explanation:
          description: ''
          minLength: 3
          type: string
        accountTo:
          description: ''
          minLength: 4
          type: string
        accountFrom:
          description: ''
          minLength: 4
          type: string
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
tags:
  -
    name: Sessions
    description: ''
  -
    name: Users
    description: ''
